import { Bot, Context } from "grammy";
import { MyContext } from "../../bot.js";
import { getEvents } from "../../services/eventsControl.js";

export const addEventCommand = (bot: Bot<MyContext>) => {
    bot.command("addevent", async (ctx) => {
        if (!ctx.config.isDeveloper) {
            return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!");
        }
        else {
            await ctx.conversation.enter("addEventConversation");
        }
    });
}

export const deleteEventCommand = (bot: Bot<MyContext>) => {
    bot.command("deleteevent", async (ctx) => {
        if (!ctx.config.isDeveloper) {
            return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!");
        }
        else {
            await ctx.conversation.enter("deleteEventConversation");
        }
    });
}

export const getEventsCommand = (bot: Bot<MyContext>) => {
    bot.command("getevents", async (ctx) => {
        if (!ctx.config.isDeveloper) {
            return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!");
        }
        else {
            const events = await getEvents();
            const eventsList = events.length > 0 ? events.map(event => `
  üìÜ <b>${event.name}</b>  
  üìç <i>${event.date}</i>  
  üîó <a href="${event.link}">–ü–µ—Ä–µ–π—Ç–∏</a>  
  ${event.note ? `‚ÑπÔ∏è <i>${event.note}</i>` : ''}`
            ).join("\n\n") : "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π";

            await ctx.reply(eventsList, { parse_mode: "HTML", link_preview_options: { is_disabled: true } });
        }
    });
}